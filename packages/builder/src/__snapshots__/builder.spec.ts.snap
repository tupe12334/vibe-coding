// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`builder > working with all options including framework 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

Package Manager: npm

## Programming language (typescript)

* Use Interfaces over Types unless needed.

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.

## Lint system (eslint)

* Use ESLint to enforce code quality and style guidelines.

* Fix lint issues before committing code.

## Project type (frontend)

* Prefer working with flex layouts for responsive design.

* Use rems for font sizes and spacing to ensure scalability.

* When writing a component, try to enter logic or network into it.

## Framework (react)

* Use key in React lists to help React identify which items have changed, are added, or removed.
"
`;

exports[`builder > working with cicd system only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## CI/CD system (github-actions)

* CI process should run lint, test and steps preferably in parallel if posable.

* CD process should use the defined release system.
"
`;

exports[`builder > working with createdAt option 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

Created at: 2020-01-01T00:00:00.000Z
"
`;

exports[`builder > working with framework only - cypress 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Framework (cypress)

* Use Cypress commands to keep tests concise and readable.
"
`;

exports[`builder > working with framework only - nestjs 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Framework (nestjs)

* Separate the folder structure into domain driven design (DDD) modules, i.e. each module should have its own folder with controllers, services, and entities.
"
`;

exports[`builder > working with framework only - playwright 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Framework (playwright)

* Prefer using fixtures to share setup across Playwright tests.
"
`;

exports[`builder > working with framework only - react 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Framework (react)

* Use key in React lists to help React identify which items have changed, are added, or removed.
"
`;

exports[`builder > working with language and lint system 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Programming language (javascript)

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.

## Lint system (eslint)

* Use ESLint to enforce code quality and style guidelines.

* Fix lint issues before committing code.
"
`;

exports[`builder > working with language and package manager 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

Package Manager: npm

## Programming language (typescript)

* Use Interfaces over Types unless needed.

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.
"
`;

exports[`builder > working with language only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Programming language (javascript)

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.
"
`;

exports[`builder > working with language only with a language that is superset 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Programming language (typescript)

* Use Interfaces over Types unless needed.

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.
"
`;

exports[`builder > working with language, project type and framework 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Programming language (typescript)

* Use Interfaces over Types unless needed.

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.

## Project type (backend)

* Always validate endpoint request data.

## Framework (nestjs)

* Separate the folder structure into domain driven design (DDD) modules, i.e. each module should have its own folder with controllers, services, and entities.
"
`;

exports[`builder > working with monorepo system only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

Monorepo system: turbo
"
`;

exports[`builder > working with no arguments returns general segment only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.
"
`;

exports[`builder > working with project type and cicd system 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## CI/CD system (gitlab-ci)

* CI process should run lint, test and steps preferably in parallel if posable.

* CD process should use the defined release system.

## Project type (lib)

* Work with version control for publish the package if its publishable

* Create a clear and comprehensive README.md with installation instructions, usage examples, and API documentation

* Use semantic versioning (semver) for package versions

* Include proper TypeScript declaration files (.d.ts) for better developer experience

* Set up automated testing with good test coverage before publishing

* Configure proper entry points in package.json (main, module, types fields)

* Consider tree-shaking compatibility by using ES modules

* Add proper keywords and description in package.json for discoverability
"
`;

exports[`builder > working with project type and framework - backend with nestjs 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (backend)

* Always validate endpoint request data.

## Framework (nestjs)

* Separate the folder structure into domain driven design (DDD) modules, i.e. each module should have its own folder with controllers, services, and entities.
"
`;

exports[`builder > working with project type and framework - e2e with playwright 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (e2e)

* Structure tests using the Page Object Model (POM) for maintainability.

* Use screenshot testing when possible to detect visual regressions.

* Use msw (Mock Service Worker) for API mocking in tests to ensure consistent and reliable test environments.

## Framework (playwright)

* Prefer using fixtures to share setup across Playwright tests.
"
`;

exports[`builder > working with project type and framework - frontend with react 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (frontend)

* Prefer working with flex layouts for responsive design.

* Use rems for font sizes and spacing to ensure scalability.

* When writing a component, try to enter logic or network into it.

## Framework (react)

* Use key in React lists to help React identify which items have changed, are added, or removed.
"
`;

exports[`builder > working with project type and monorepo system 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

Monorepo system: nx

## Project type (lib)

* Work with version control for publish the package if its publishable

* Create a clear and comprehensive README.md with installation instructions, usage examples, and API documentation

* Use semantic versioning (semver) for package versions

* Include proper TypeScript declaration files (.d.ts) for better developer experience

* Set up automated testing with good test coverage before publishing

* Configure proper entry points in package.json (main, module, types fields)

* Consider tree-shaking compatibility by using ES modules

* Add proper keywords and description in package.json for discoverability
"
`;

exports[`builder > working with project type and release system 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (lib)

* Work with version control for publish the package if its publishable

* Create a clear and comprehensive README.md with installation instructions, usage examples, and API documentation

* Use semantic versioning (semver) for package versions

* Include proper TypeScript declaration files (.d.ts) for better developer experience

* Set up automated testing with good test coverage before publishing

* Configure proper entry points in package.json (main, module, types fields)

* Consider tree-shaking compatibility by using ES modules

* Add proper keywords and description in package.json for discoverability

## Release system (semantic-release)

* Use semantic-release for automated versioning and changelog generation.
"
`;

exports[`builder > working with project type e2e 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (e2e)

* Structure tests using the Page Object Model (POM) for maintainability.

* Use screenshot testing when possible to detect visual regressions.

* Use msw (Mock Service Worker) for API mocking in tests to ensure consistent and reliable test environments.
"
`;

exports[`builder > working with project type lib 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (lib)

* Work with version control for publish the package if its publishable

* Create a clear and comprehensive README.md with installation instructions, usage examples, and API documentation

* Use semantic versioning (semver) for package versions

* Include proper TypeScript declaration files (.d.ts) for better developer experience

* Set up automated testing with good test coverage before publishing

* Configure proper entry points in package.json (main, module, types fields)

* Consider tree-shaking compatibility by using ES modules

* Add proper keywords and description in package.json for discoverability
"
`;

exports[`builder > working with project type lib and language typescript 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Programming language (typescript)

* Use Interfaces over Types unless needed.

* Use \\\`const\\\` over \\\`let\\\` unless reassignment is needed.

* Use \\\`===\\\` over \\\`==\\\` for strict equality checks.

* Use arrow functions for anonymous functions.

* Use template literals for string interpolation.

## Project type (lib)

* Work with version control for publish the package if its publishable

* Create a clear and comprehensive README.md with installation instructions, usage examples, and API documentation

* Use semantic versioning (semver) for package versions

* Include proper TypeScript declaration files (.d.ts) for better developer experience

* Set up automated testing with good test coverage before publishing

* Configure proper entry points in package.json (main, module, types fields)

* Consider tree-shaking compatibility by using ES modules

* Add proper keywords and description in package.json for discoverability
"
`;

exports[`builder > working with project type only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (frontend)

* Prefer working with flex layouts for responsive design.

* Use rems for font sizes and spacing to ensure scalability.

* When writing a component, try to enter logic or network into it.
"
`;

exports[`builder > working with project type ui-lib 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Project type (ui-lib)

* Prefer working with flex

* Prioritize the use of components that exist in the library already.

* Folder structure:

  \\- \\\`src/\\\`: Contains the source code for the components.
  \\- \\\`src/\\<component>/\\\`: Contains the individual components.
  &#x20; \\- Each component has its own folder with the following structure:
  &#x20;   \\- \\\`index.ts\\\`: Exports all the relevant data.
  &#x20;   \\- \\\`\\<ComponentName>.tsx\\\`: Contains the main component code.
  &#x20;   \\- \\\`styles.ts\\\`: Contains styles for the component.
  &#x20;   \\- \\\`types.ts\\\`: Contains TypeScript types for the component.
  &#x20;   \\- \\\`\\<ComponentName>.test.tsx\\\`: Contains tests for the component.
  &#x20;   \\- \\\`\\<ComponentName>.stories.tsx\\\`: Contains Storybook stories for the component.
  \\- \\\`src/index.ts\\\`: Exports all components for easy import.

* Work with version control for publish the package if its publishable

* Create a clear and comprehensive README.md with installation instructions, usage examples, and API documentation

* Use semantic versioning (semver) for package versions

* Include proper TypeScript declaration files (.d.ts) for better developer experience

* Set up automated testing with good test coverage before publishing

* Configure proper entry points in package.json (main, module, types fields)

* Consider tree-shaking compatibility by using ES modules

* Add proper keywords and description in package.json for discoverability
"
`;

exports[`builder > working with release system only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Release system (release-it)

* Use release-it for interactive version management and publishing.
"
`;

exports[`builder > working with test framework only 1`] = `
"# AI agent instructions

## General Guidelines

* Don't work on any of the tasks in the TODO.md file unless you are asked to.

* Always try to early return from functions.

* Use \\\`const\\\` for variables that are not reassigned.

* Make sure to focus on why and not how in documentation.

* Write predictable functions and make a spec file for them according to the testing library in use.

* Don't use \\\`any\\\` in TypeScript, use \\\`unknown\\\` instead.

* Don't cast types without validation.

* Whenever finish a task from the TODO.md file mark it as finished, if there is some that already marked as finish delete them

* Work in a domain driven design (DDD) way, i.e. every function its is own module, and its its folder there is the code with JSDocs, spec file and types in there files.

* Put unit tests in the same folder as the code they test, and name them with \\\`.spec.ts\\\` suffix.

* After finishing the task make sure to run format, lint, test and build commands.

* Don't use file extensions in imports, use absolute imports instead.

## Testing framework (jest)

* Use Jest for unit testing and mocking dependencies.
"
`;
